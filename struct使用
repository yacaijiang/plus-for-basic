一文搞懂C和C++中struct¶
1.C中struct¶
在C中struct只单纯的用作数据的复合类型，也就是说，在结构体声明中只能将数据成员放在里面，而不能将函数放在里面。
在C结构体声明中不能使用C++访问修饰符，如：public、protected、private 而在C++中可以使用。
在C中定义结构体变量，如果使用了下面定义必须加struct。
C的结构体不能继承（没有这一概念）。
若结构体的名字与函数名相同，可以正常运行且正常的调用！例如：可以定义与 struct Base 不冲突的 void Base() {}。
完整案例：


#include<stdio.h>

struct Base {            // public
    int v1; 
//    public:      //error
        int v2; 
    //private:
        int v3; 
    //void print(){       // c中不能在结构体中嵌入函数
    //    printf("%s\n","hello world");
    //};    //error!
};

void Base(){
    printf("%s\n","I am Base func");
}
//struct Base base1;  //ok
//Base base2; //error
int main() {
    struct Base base;
    base.v1=1;
    //base.print();
    printf("%d\n",base.v1);
    Base();
    return 0;
}
最后输出：


1
I am Base func
完整代码见：struct_func.c

2.C++中struct¶
与C对比如下：

C++结构体中不仅可以定义数据，还可以定义函数。
C++结构体中可以使用访问修饰符，如：public、protected、private 。
C++结构体使用可以直接使用不带struct。
C++继承
若结构体的名字与函数名相同，可以正常运行且正常的调用！但是定义结构体变量时候只用用带struct的！
例如：

情形1：不适用typedef定义结构体别名

未添加同名函数前：


struct Student {

};
Student(){}
Struct Student s; //ok
Student s;  //ok
添加同名函数后：


struct Student {

};
Student(){}
Struct Student s; //ok
Student s;  //error
情形二：使用typedef定义结构体别名


typedef struct Base1 {         
    int v1;
//    private:   //error!
        int v3;
    public:     //显示声明public
        int v2;
    void print(){       
        printf("%s\n","hello world");
    };    
}B;
//void B() {}  //error! 符号 "B" 已经被定义为一个 "struct Base1" 的别名
前三种案例


#include<iostream>
#include<stdio.h>

struct Base {         
    int v1;
//    private:   //error!
        int v3;
    public:     //显示声明public
        int v2;
    void print(){       
        printf("%s\n","hello world");
    };    
};

int main() {
    struct Base base1;  //ok
    Base base2; //ok
    Base base;
    base.v1=1;
    base.v3=2;
    base.print();
    printf("%d\n",base.v1);
    printf("%d\n",base.v3);
    return 0;
}
完整代码见：struct_func.cpp

继承案例


#include<iostream>
#include<stdio.h>
struct Base {         
    int v1;
//    private:   //error!
        int v3;
    public:   //显示声明public
        int v2;
    virtual void print(){       
        printf("%s\n","Base");
    };    
};
struct Derived:Base {         

    public:
        int v2;
    void print(){       
        printf("%s\n","Derived");
    };    
};
int main() {
    Base *b=new Derived();
    b->print();
    return 0;
}
完整代码见：ext_struct_func.cpp

同名函数


#include<iostream>
#include<stdio.h>

struct Base {         
    int v1;
//    private:   //error!
        int v3;
    public:     //显示声明public
        int v2;
    void print(){       
        printf("%s\n","hello world");
    };    
};

typedef struct Base1 {         
    int v1;
//    private:   //error!
        int v3;
    public:     //显示声明public
        int v2;
    void print(){       
        printf("%s\n","hello world");
    };    
}B;
void Base(){
    printf("%s\n","I am Base func");
}
//void B() {}  //error! 符号 "B" 已经被定义为一个 "struct Base1" 的别名
int main() {
    struct Base base;  //ok
    //Base base1;  // error!
    base.v1=1;
    base.v3=2;
    base.print();
    printf("%d\n",base.v1);
    printf("%d\n",base.v3);
    Base();
    return 0;
}
完整代码见：struct_func_func.cpp

3.总结¶
C和C++中的Struct区别¶
C                                                       	C++
不能将函数放在结构体声明	                            能将函数放在结构体声明
在C结构体声明中不能使用C++访问修饰符。              	public、protected、private 在C++中可以使用。
在C中定义结构体变量，如果使用了下面定义必须加struct。   	可以不加struct
结构体不能继承（没有这一概念）。                            	可以继承
若结构体的名字与函数名相同，可以正常运行且正常的调用！  	若结构体的名字与函数名相同，使用结构体，只能使用带struct定义！


C++那些事
 Light-City/CPlusPlusThings
5.7k Stars1.2k Forks
 
项目概要
使用须知
基础进阶
基础进阶
const那些事
static那些事
this那些事
inline那些事
sizeof那些事
纯虚函数和抽象类那些事
vptr_vtable那些事
virtual那些事
volatile那些事
assert那些事
位域那些事
extern那些事
struct那些事
struct与class那些事
union那些事
c实现C++多态那些事
explicit那些事
friend那些事
using那些事
::那些事
enum那些事
decltype那些事
引用与指针那些事
宏那些事
实战系列
实战系列
10日狂练
重点实战练习
C++2.0新特性
C++2.0新特性
C++11
待更新
设计模式
设计模式
单例模式
源码剖析
源码剖析
array
deque
queue and stack
list
vector
typename
traits
iterator
EBO优化
rb_tree
set and multiset
map and multimap
hashtable
myhashtable
unordered_map
并发编程
并发编程
C++ Concurrency in Action
Threading In C++
惯用法
惯用法
类初始化列表
枚举类替换命名空间
RAII
copy and swap
pImpl
学习课程
学习课程
极客时间《现代C++实战30讲》
工具篇
工具篇
容器快捷输出工具
像Python一样玩C/C++
观察编译过程变化
C++的Debug工具dbg-macro
拓展部分
拓展部分
一些问题
项目贡献
联系作者
struct与class区别¶
关于C与C++中struct内容：见struct那些事

总的来说，struct 更适合看成是一个数据结构的实现体，class 更适合看成是一个对象的实现体。

区别:

最本质的一个区别就是默认的访问控制

默认的继承访问权限。struct 是 public 的，class 是 private 的。

struct 作为数据结构的实现体，它默认的数据访问控制是 public 的，而 class 作为对象的实现体，它默认的成员变量访问控制是 private 的。


struct与class区别¶
关于C与C++中struct内容：见struct那些事

总的来说，struct 更适合看成是一个数据结构的实现体，class 更适合看成是一个对象的实现体。

区别:

最本质的一个区别就是默认的访问控制

默认的继承访问权限。struct 是 public 的，class 是 private 的。

struct 作为数据结构的实现体，它默认的数据访问控制是 public 的，而 class 作为对象的实现体，它默认的成员变量访问控制是 private 的。
